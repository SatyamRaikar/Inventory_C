/* Inventory Management */
# include <stdio.h>
int main( )
{
int *inven[ 3 ][ 4 ] ; /* 3 divisions and 4 categories */
int comp[ 3 ] ;
int *c ;
char ch = 'y' ;
int t, i, j, pno, d, comp_no ;
int tot = 0, cost[ 4 ] = { 100, 200, 300, 400 } ;
long int tot_in_val = 0 ;
for ( i = 0 ; i <= 2 ; i++ )
{
for ( j = 0 ; j <= 3 ; j++ )
{
c = ( int* ) malloc ( sizeof ( int ) * 3 ) ;
inven[ i ][ j ] = c ;
*( inven[ i ][ j ] + 0 ) = 0 ;
*( inven[ i ][ j ] + 1 ) = 0 ;
*( inven[ i ][ j ] + 2 ) = 0 ;
}
}
while ( ch == 'y' || ch == 'Y' )
{
printf ( "\nEnter the Division 0, 1 or 2: " ) ;
scanf ( "%d", &d ) ;
if ( d < 0 || d > 2 )
{
printf ( "\nInvalid Division" ) ;
continue ;
}
printf ( "\nSelect product number\nfrom 0, 1, 2 or 3 which 
represents its category: " ) ;
scanf ( "%d", &pno ) ;
if ( pno < 0 || pno > 3 )
{
printf ( "Invalid Division\n" ) ;
continue ;
}
printf ( "\nEnter the company number 0, 1, 2\nfrom where
the product is purchased: " ) ;
scanf ( "%d", &comp_no ) ;
if ( comp_no >= 0 && comp_no <= 2 )*( inven[ d ][ pno ] +
 comp_no ) = *( inven[ d ][ pno ] + comp_no ) + 1 ;
else
{
printf ( "Invalid Company number\n" ) ;
continue ;
}
printf ( "\n\n\t\t Want to enter another data ( y / n )\n\t\t " ) ;
fflush ( stdin ) ;
scanf ( "%c", &ch ) ;
fflush ( stdin ) ;
}
printf ( "\ntotal quantity of products present in each divisions are: ") ;
printf ( "\nProduct \t0\t1\t2\t3\n" ) ;
for ( i = 0 ; i <= 2 ; i++ )
{
printf ( "\nDivision No %d", i ) ;
for ( j = 0 ; j <= 3 ; j++ )
{
t = *( inven[ i ][ j ] + 0 ) + *( inven[ i ][ j ] + 1 ) + 
*( inven[ i ][ j ] + 2 ) ;
printf ( "\t%d", t ) ;
}
printf ( "\n" ) ;
}
printf ( "\nTotal cost of products present in each divisions are:\n" ) ;
for ( i = 0 ; i <= 2 ; i++ )
{
printf ( "\nDivision No %d", i + 1 ) ;
for ( j = 0 ; j <= 3 ; j++ )
{
t = *( inven[ i ][ j ] + 0 )+ *( inven[ i ][ j ] + 1 ) + 
* ( inven[ i ][ j ] + 2 ) ;
tot = tot + t * cost[ j ] ;
}
printf ( "\tRs. %d ", tot ) ;
printf ( "\n" ) ;
tot_in_val = tot_in_val + tot ;
tot = 0 ;
}
printf ( "\n\n Total inventory cost = %ld", tot_in_val ) ;
return 0
}
